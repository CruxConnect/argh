Argh, argparse!
===============

Did you ever say "argh" trying to remember the details of `optparse` or
`argparse` API?  If yes, this package may be useful for you.

`Argh` provides a wrapper for `argparse`.  `Argparse` is a very powerful tool;
`argh` just makes it easy to use.

In a nutshell
-------------

Here's a list of features that `argh` adds to `argparse`:

* mark a function as a CLI command and specify its arguments before the parser
  is instantiated;
* nested commands made easy: no messing with subparsers (though they are of
  course used under the hood);
* infer command name from function name;
* infer agrument type from the default value;
* infer argument action from the default value (for booleans);
* infer arguments from function signature;
* add an alias root command ``help`` for the ``--help`` argument;
* enable passing unwrapped arguments to certain functions instead of a
  `argparse.Namespace` object.

`Argh` is fully compatible with `argparse`.  You can mix `argh`-agnostic and
`argh`-aware code.  Just keep in mind that the dispatcher does some extra work
that a custom dispatcher may not do.

Installation
------------

Using pip::

    $ pip install argh

Arch Linux (AUR)::

    $ yaourt python-argh

Examples
--------

A very simple application with one command::

    from argh import *

    def main():
        return 'Hello world'

    dispatch_command(main)

A flexible application with multiple commands::

    def echo(text):
        return text

    def greeter(name, greeting='hello'):
        return greeting + ', ' + name

    parser = ArghParser()
    parser.add_commands([echo, greeter])

    if __name__ == '__main__':
        parser.dispatch()

The powerful API of `argparse` is also available::

    @arg('text', default='hello world', nargs='+', help='The message')
    def echo(text):
        print args.text

The approaches can be safely combined even up to this level::

    # adding help to `foo` which is in the function signature:
    @arg('foo', help='blah')
    # these are not in the signature so they go to **kwargs:
    @arg('baz')
    @arg('-q', '--quux')
    # the function itself:
    def cmd(foo, bar=1, *args, **kwargs):
        yield foo
        yield bar
        yield ', '.join(args)
        yield kwargs['baz']
        yield kwargs['quux']

Links
-----

* `Project home page`_ (Bitbucket)
* `Documentation`_ (Read the Docs)
* `Package distribution`_ (PyPI)
* Questions, requests, bug reports, etc.:

  * `Issue tracker`_
  * `Mailing list`_ (subscribe to get important announcements)
  * Direct e-mail (neithere at gmail com)
  * Twitter_ (to get notified of commits; mostly for lulz)

.. _project home page: http://bitbucket.org/neithere/argh/
.. _documentation: http://argh.readthedocs.org
.. _package distribution: http://pypi.python.org/pypi/argh
.. _issue tracker: http://bitbucket.org/neithere/argh/issues/
.. _mailing list: http://groups.google.com/group/argh-users
.. _twitter: http://twitter.com/python-argh

Author
------

Developed by Andrey Mikhaylenko since 2010.

See file `AUTHORS` for a complete list of contributors to this library.

Licensing
---------

Argh is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Argh is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Argh.  If not, see <http://gnu.org/licenses/>.
